<?xml version="1.0"?>
<!-- ====================================================================== 
    Ant build file for JACOB. 

    Created Feb 4, 2005 1:23:05 PM as part of migration from ANT
    Last Modified March 24, 2007                                                  
     
    Tested on Eclipse 3.3 with the Europa C++ plugins, Ant 1.7 and MS Visual C++ 8 (2005)
    Eclipse users are pretty lucky because the whole project 
    can be built inside eclipse due to their built in ANT support.
     
    The COM portion of this build requires MS Visual C++ 8.0. (2005)
    The build proces defined in this build.xml file does not support
                                                                                 
	YOU MUST define a file named compilation_tools.properties!
	The file for MS Visual C++ 8.0 building 32 and 64 bit
	(releases up to 1.11 only supported 32 builds) looks something like:
	  
		JDK=d:\\j2sdk1.4.2_14
		MSDEV_DIR=d:\\apps\\Microsoft Visual Studio 8\\VC
		MSDEV_IDE_DIR=d:\\apps\\Microsoft Visual Studio 8\\Common7\\IDE
		version=1.13
            
	DO NOT check compilation_tools.properties into source control as the 
	values are specific to YOUR environment.

	The version.properties file is now completely autogenerated	  
	  	  
     ====================================================================== -->
<project name="jacob" default="default" basedir=".">

	<!-- ======================================================================
			First handle the properties that come from property files
			Sets a default for properties that were not in the file.
			Relies on the fact that properties cannot be reset once set.
	 	================================================================== -->
	<property file="compilation_tools.properties" />
	<property environment="env"/>
	<echo message="Number of Processors = ${env.NUMBER_OF_PROCESSORS}"/>
	<property name="JDK" value="JDK not set in compilation_tools properties file"/>
	<!-- MSDEV_DIR is a required parameter so set to a message if its not set -->
	<property name="MSDEV_DIR" value="MSDEV_DIR not set in compilation_tools properties file"/>
	<echo message="executing with MSDEV_DIR=${MSDEV_DIR}" />

	
	<!-- ======================================================================
			Now build up all the derived properties
		 ================================================================== -->

	<property name="application.title" value="JACOB : Java COM Bridge" />
	<property name="application.vendor" value="http://jacob-project.sourceforge.net" />
	<property name="src.java.jacob.mainpackage" value="com.jacob" />
	<property name="java.class.main" value="com.jacob.com.Jacob" />
	<property name="generated.filename.dll" value="jacob.dll" />
	<property name="generated.filename.jar" value="jacob.jar" />
	<property name="generated.filename.zip" value="jacob_${version}" />
	
	<property name="junit.jar"         value="${basedir}\lib\junit3.8.1\junit.jar" />
		
	<property name="src.java.jacob"    value="${basedir}/src" />
	<property name="src.java.samples"  value="${basedir}/samples" />
	<property name="src.java.unittest" value="${basedir}/unittest" />
	<property name="src.cpp"           value="${basedir}/jni" />

	<property name="release.dir"          	value="${basedir}\release" />
	
	<property name="release.dir.x86"      	value="${release.dir}\x86" />	
	<property name="release.dir.x86.cpp"  	value="${release.dir.x86}\jni" />
	<property name="release.file.x86.dll" 	value="${release.dir.x86}\${generated.filename.dll}" />
	
	<property name="release.dir.AMD64"      value="${release.dir}\AMD64" />	
	<property name="release.dir.AMD64.cpp"  value="${release.dir.AMD64}\jni" />
	<property name="release.file.AMD64.dll" value="${release.dir.AMD64}\${generated.filename.dll}" />

	<property name="release.dir.java"     	value="${release.dir}\java" />
	<property name="release.file.jar"     	value="${release.dir.java}\${generated.filename.jar}" />
	
	<property name="compiler.x86"            value="${MSDEV_DIR}\bin\cl.exe" />
	<property name="linker.x86"              value="${MSDEV_DIR}\bin\link.exe" />
	<property name="manifestool.x86"         value="${MSDEV_DIR}\bin\mt.exe" />
	<property name="include.x86"             value="${MSDEV_DIR}\include" />
	<property name="include.x86.platformSDK" value="${MSDEV_DIR}\PlatformSDK\Include" />
	<property name="include.x86.atl"         value="${MSDEV_DIR}\atlmfc\include" />
	<property name="library.x86"             value="${MSDEV_DIR}\lib" />
	<property name="library.x86.platformSDK" value="${MSDEV_DIR}\PlatformSDK\lib" />
	<property name="library.x86.atl"         value="${MSDEV_DIR}\atlmfc\lib" />
	
	<!-- You have to love the beautiful asymetry of the MS world -->
	<!-- The platform SDK comes with 64 bit tools but not 32 bit tools -->
	<property name="compiler.AMD64" 			value="${MSDEV_DIR}\bin\x86_amd64\cl.exe" />
	<property name="linker.AMD64"   			value="${MSDEV_DIR}\bin\x86_amd64\link.exe" />
	<property name="manifesttool.AMD64"			value="${MSDEV_DIR}\bin\x86_amd64\mt.exe" />
	<property name="include.AMD64"  			value="${MSDEV_DIR}\include" />
	<property name="library.AMD64"  		    value="${MSDEV_DIR}\lib\AMD64" />
	<property name="library.AMD64.platformSDK"  value="${MSDEV_DIR}\PlatformSDK\lib\AMD64" />
	<property name="library.AMD64.atl"  		value="${MSDEV_DIR}\atlmfc\lib\AMD64" />


	<!-- ======================================================================
		      Create the necessary directory structure (does nothing if it
		      already there)        
		 ================================================================== -->
	<mkdir dir="${release.dir.java}"/>
	<mkdir dir="${release.dir.x86.cpp}"/>
	<mkdir dir="${release.dir.AMD64.cpp}"/>
	<mkdir dir="${release.dir}"/>

	<!-- ======================================================================
		      Writes out a version file to be included in the jar        
		 ================================================================== -->
	<property name="version" value="version not set in compilation_tools properties file"/>
	<propertyfile file="version.properties">
		<entry key="version" type="string" value="${version}" />
		<entry key="build.iteration" type="int" operation="+" value="1" pattern="00" />
		<entry key="build.date" type="date" value="now" operation="=" pattern="dd-MMMM-yyyy HH:mm:ss" />
	</propertyfile>
	<property file="version.properties" />

	<!-- ======================================================================
			32 bit x86 can only be built on 32 bit because of a JDK library issue.
			arch=x86 true if on 32 bit, unset in all other cases.
			This module used to rely on that.  Now it just checks to see if we have
			the right compilers.
	 ================================================================== -->
	<available file="${compiler.x86}" property="canBuildX86"/>
	<echo message="canBuildX86=${canBuildX86}" />
	<available file="${compiler.AMD64}" property="canBuildAMD64"/>
	<echo message="canBuildAMD64=${canBuildAMD64}" />
		
	<!-- ======================================================================
		      Compare the date/time of the DLL against that of the cpp source.
		      Up to date is only true if dll exists and is later than source
		 ================================================================== -->
	<uptodate property="dllUpToDateX86" targetfile="${release.file.x86.dll}">
		<srcfiles dir="${src.cpp}" includes="*.cpp" />
		<srcfiles dir="${src.cpp}" includes="*.h" />
		<!-- Check the build file itself as well -->
		<srcfiles dir="${basedir}" includes="build.xml" />
	</uptodate>
	<echo message="dllUpToDateX86= ${dllUpToDateX86} (${release.file.x86.dll})" />
	<uptodate property="dllUpToDateAMD64" targetfile="${release.file.AMD64.dll}">
		<srcfiles dir="${src.cpp}" includes="*.cpp" />
		<srcfiles dir="${src.cpp}" includes="*.h" />
		<!-- Check the build file itself as well -->
		<srcfiles dir="${basedir}" includes="build.xml" />
	</uptodate>
	<echo message="dllUpToDateAMD64= ${dllUpToDateAMD64} (${release.file.AMD64.dll})" />

	<!-- ======================================================================
		      We should build if we can build and the dll is not up to date
		 ================================================================== -->
	<condition property="shouldBuildX86">
		<and>
			<isset property="canBuildX86"/>
			<not>
				<isset property="dllUpToDateX86"/>
			</not>
		</and>
	</condition>
	<echo message="shouldBuildX86= ${shouldBuildX86}" />
	
	<condition property="shouldBuildAMD64">
		<and>
			<isset property="canBuildAMD64"/>
			<not>
				<isset property="dllUpToDateAMD64"/>
			</not>
		</and>
	</condition>
	<echo message="shouldBuildAMD64= ${shouldBuildAMD64}" />
	
	
	<!--=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v=v
			START of TASKS
		=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^=^ -->

	<!-- ================================= 
          target: default              
         ================================= -->
	<target name="default" 
			depends="javaJarBin,makeDllX86,makeDllAMD64">
		<echo message="${application.title} ${version} build ${build.iteration} : finished on ${build.date}" />
	</target>

	<!-- ======================================================================
		      Target (still in development) that removes all bin directories        
		 ================================================================== -->
	<target name="clean">
		<delete>
			<fileset dir="${release.dir.java}"/>
			<fileset dir="${release.dir.x86.cpp}"/>
			<fileset dir="${release.dir.AMD64.cpp}"/>
			<fileset dir="${release.dir}"/>
		</delete>
	</target>
	<!-- ======================================================================
		      Compare the date/time of the JAR against that 
		      of the java source          
		 ================================================================== -->
	<target name="javaJarCheck">
		<uptodate property="jarUpToDate" targetfile="${release.file.jar}">
			<srcfiles dir="${src.java.jacob}" includes="com/**/*.java" />
			<!-- Check the build file itself as well -->
			<srcfiles dir="${basedir}" includes="build.xml" />
		</uptodate>
		<echo message="javaJarCheck says jarUpToDate= ${jarUpToDate}" />
	</target>
	<!-- ======================================================================
		      Compile the java files and copy version.properties to be jar'd up
		      Relies on ant recognizing when a file needs to be compiled
		      
		      Unit tests compiled seperately because of junit dependency
		 ================================================================== -->
	<target name="javaCompile" >
		<echo>Building Jacob classes in ${release.dir.java}</echo>
		<javac srcdir="${src.java.jacob}" 
			destdir="${release.dir.java}" 
			listfiles="true" debug="on" source="1.4" />
		<echo>Building sample classes in ${release.dir.java}</echo>
		<javac srcdir="${src.java.samples}" 
			destdir="${release.dir.java}" 
			classpath="${release.dir.java}"
			listfiles="true" debug="on" source="1.4" />
		<echo>Building Jacob test classes in ${release.dir.java} using junit jar ${junit.jar}</echo>
		<javac srcdir="${src.java.unittest}" 
			destdir="${release.dir.java}" 
			classpath="${release.dir.java}:${junit.jar}"
			listfiles="true" debug="on" source="1.4" />
		<copy file="version.properties" todir="${release.dir.java}"/>
	</target>
	<!-- ======================================================================
	      Package the classes into a JAR.    
	      Put version.propertes into the jar file so version retrieval method can find it         
		 ================================================================== -->
	<target name="javaJarBin" 
				depends="javaCompile,javaJarCheck" 
				unless="jarUpToDate">
		<echo>Removing old jars</echo>
		<delete file="${release.file.jar}" />
		<echo>Packaging java classes...</echo>		
		<jar destfile="${release.file.jar}" basedir="${release.dir.java}" update="false">
			<exclude name="**/CVS" />
			<!-- exclude all unit tests (ending in Test) 
				and everything in the samples and test packages -->
			<exclude name="com/**/*Test*.class"/>
			<exclude name="com/jacob/samples/**"/>
			<exclude name="com/jacob/test/**"/>
			<include name="com/**/*.class" />
			<include name="version.properties" />
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
                <attribute name="Main-Class" value="${java.class.main}"/>
				<section name="${src.java.jacob.mainpackage}">
					<attribute name="Specification-Title" value="${application.title}" />
					<attribute name="Specification-Vendor" value="${application.vendor}" />
					<attribute name="Implementation-Title" value="${application.title} Java libraries" />
					<attribute name="Implementation-Version" value="${version} build ${build.iteration} on ${build.date}" />
				</section>
			</manifest>
		</jar>
	</target>
	<!-- ======================================================================
		      Compile the c source files.             
		 ================================================================== -->
	<target name="compileX86" if="shouldBuildX86">
		<echo>Clean up the (x86) target folders and file, for safety</echo>
		<delete file="${release.dir.x86.cpp}/**/*.*" />
		<echo>Compiling (x86) C++ classes with JDK JNI library ${JDK}</echo>
		<exec executable="${compiler.x86}" dir="${release.dir.x86.cpp}" failonerror="true">
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<env key="include" value="${JDK}\include;${JDK}\include\win32;${include.x86.platformSDK};${include.x86};${include.x86.atl}"/>
			<arg value="/nologo"/>
			<arg value="/c"/>
			<arg value="/D WIN32"/>
			<arg value="/D NDEBUG"/>
			<arg value="/D _WINDOWS"/>
			<arg value="/D _USRDLL"/>
			<arg value="/D _WINDLL" />
			<!-- create a multi threaded dll -->
			<arg value="/MD"/>
			<!-- raise the warning level from the default -->
			<!-- <arg value="/Wp64"/> -->
			<arg value="/W2" />
			<!-- sets the exception model -->
			<arg value="/EHsc" />
			<!-- /O2 and /RCT1 are incompatible -->
			<!-- optimize build for speed. (is this VC specific? -->
			<arg value="/O2" />
			<!-- next two wipe out a lot of deprecated warnings about strings when using VC++ 8.0 and SDK-->
			<arg value="/D _CRT_SECURE_NO_DEPRECATE" />
			<arg value="/D _CRT_NONSTDC_NO_DEPRECATE" />
			<arg value="/D _STATIC_CPPLIB" />
			<arg value="${src.cpp}/*.cpp"/>
		</exec>
	</target>

	<target name="compileAMD64" if="shouldBuildAMD64">
		<echo>Clean up the (AMD64) target folders and file, for safety</echo>
		<delete file="${release.dir.AMD64.cpp}/**/*.*" />
		<echo>Compiling C++ (AMD64) classes with JDK JNI library ${JDK}</echo>
		<exec executable="${compiler.AMD64}" dir="${release.dir.AMD64.cpp}" failonerror="true">
			<env key="include" value="${JDK}\include;${JDK}\include\win32;${include.x86.platformSDK};${include.x86};${include.x86.atl}"/>
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<arg value="/nologo"/>
			<arg value="/c"/>
			<arg value="/D WIN64"/>
			<arg value="/D NDEBUG"/>
			<arg value="/D _WINDOWS"/>
			<arg value="/D _USRDLL"/>
			<arg value="/D _WINDLL" />
			<!-- create a multi threaded dll -->
			<arg value="/MD"/>
			<!-- raise the warning level from the default -->
			<!-- <arg value="/Wp64"/> -->
			<arg value="/W2" />
			<!-- sets the exception model -->
			<arg value="/EHsc" />
			<!-- /O2 and /RCT1 are incompatible -->
			<!-- optimize build for speed. (is this VC specific? -->
			<arg value="/O2" />
			<!-- next two wipe out a lot of deprecated warnings about strings when using VC++ 8.0 and SDK-->
			<arg value="/D _CRT_SECURE_NO_DEPRECATE" />
			<arg value="/D _CRT_NONSTDC_NO_DEPRECATE" />
			<arg value="/D _STATIC_CPPLIB" />
			<arg value="${src.cpp}/*.cpp"/>
		</exec>
	</target>
	<!-- ======================================================================
		Link the obj files into a DLL.
  		DLL construction matrix (Yes=DLL can be built, No=DLL cannot)
		_________________________________________________
						Type of machine ANT is running on
       					32 bit 			64 bit
		32 bit target	Yes				No
		64 bit target	Yes				Yes
		 ================================================================== -->
	<target name="makeDllX86" depends="compileX86" if="shouldBuildX86">
		<echo>Clean up the target folders and file, for safety</echo>
		<echo>Using ${library.x86}</echo>
		<delete file="${release.file.x86.dll}" />
		<echo>Creating ${release.file.x86.dll}</echo>
		<exec executable="${linker.x86}" dir="${release.dir.x86.cpp}" failonerror="true">
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<arg value="/nologo" />
			<arg value="/MANIFEST" />
			<arg value="/MANIFESTFILE:${release.dir.x86.cpp}/jacob.dll.manifest" />
			<arg value="/dll" />
			<arg value="/version:${version}" />
			<arg value="/out:${release.file.x86.dll}" />
			<arg value="/libpath:${library.x86}" />
			<arg value="/libpath:${library.x86.platformSDK}" />
			<arg value="/libpath:${library.x86.atl}" />
			<arg value="${JDK}\lib\jvm.lib" />
			<arg value="${release.dir.x86.cpp}/*obj"/>
		</exec>
		<exec executable="${manifestool.x86}"  dir="${release.dir.x86.cpp}" failonerror="true">
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<arg value="-outputresource:${release.file.x86.dll};2"/>
			<arg value="-manifest"/>
			<arg value="${release.dir.x86.cpp}\jacob.dll.manifest" />
		</exec>
	</target>
	
	<target name="makeDllAMD64" depends="compileAMD64" if="shouldBuildAMD64">
		<echo>Clean up the target folders and file, for safety</echo>
		<delete file="${release.file.AMD64.dll}" />
		<echo>Creating {$release.file.AMD64.dll}</echo>
		<exec executable="${linker.AMD64}" dir="${release.dir.AMD64.cpp}" failonerror="true">
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<arg value="/nologo" />
			<arg value="/MANIFEST" />
			<arg value="/MANIFESTFILE:${release.dir.AMD64.cpp}/jacob.dll.manifest" />
			<arg value="/dll" />
			<arg value="/version:${version}" />
			<arg value="/out:${release.file.AMD64.dll}" />
			<arg value="/libpath:${library.AMD64}" />
			<arg value="/libpath:${library.AMD64.platformSDK}" />
			<arg value="/libpath:${library.AMD64.atl}" />
			<arg value="${JDK}\lib\jvm.lib" />
			<arg value="${release.dir.AMD64.cpp}/*.obj" />
		</exec>
		<exec executable="${manifestool.x86}"  dir="${release.dir.AMD64.cpp}" failonerror="true">
			<env key="Path" value="${MSDEV_IDE_DIR}"/>
			<arg value="-outputresource:${release.file.AMD64.dll};2"/>
			<arg value="-manifest"/>
			<arg value="${release.dir.AMD64.cpp}\jacob.dll.manifest" />
		</exec>
	</target>

	<!-- ======================================================================
		       Use this target to create javadoc from ${src.java.jacob.mainpackage}/*
		 ================================================================== -->
	<target name="generateJavaDoc">
		<defaultexcludes add="**/*Test*"/>
		<javadoc
				packagenames="${src.java.jacob.mainpackage}/**"
				sourcepath="${src.java.jacob}"
				destdir="${release.dir.java}/docs/api"
				author="true"
				version="true"
				use="true"
				windowtitle="${application.title} API Docs">
		
			<doctitle><![CDATA[<h1>${application.title}</h1>]]></doctitle>
			<bottom><![CDATA[<i>${application.vendor}</i>]]></bottom>
			<group title="Core COM Communication" packages="${src.java.jacob.mainpackage}.com/**"/>
			<group title="Higher Level Active X" packages="${src.java.jacob.mainpackage}.activeX/**"/>
			<group title="API Stub Generator" packages="${src.java.jacob.mainpackage}.jacobgen/**"/>
			<link offline="true" href="http://java.sun.com/j2se/1.4.2/docs/api/" packagelistLoc="C:\tmp"/>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
		</javadoc>
		<defaultexcludes default="true"/>
	</target>
	
	<!-- ======================================================================
		       Use this target to package all the files for a release
		 ================================================================== -->
	<target name="PackageRelease" 
		depends="makeDllX86,makeDllAMD64,javaJarBin,generateJavaDoc">

		<echo>Packaging release... ${release.file.jar}</echo>
		<zip 
			destfile="${release.dir}/${generated.filename.zip}.zip">
			<exclude name="**/CVS" />
			<exclude name="**/*.obj" />
			<exclude name="**/*.class" />
			<zipfileset dir="${basedir}"     	 	prefix="${generated.filename.zip}"       includes="LICENSE.* version.properties README.txt" />
			<zipfileset dir="${basedir}"     	 	prefix="${generated.filename.zip}"       includes="docs/**" />
			<zipfileset dir="${release.dir.x86}" 	prefix="${generated.filename.zip}/x86"   includes="${generated.filename.dll}" />
			<zipfileset dir="${release.dir.AMD64}" 	prefix="${generated.filename.zip}/AMD64" includes="${generated.filename.dll}" />
			<zipfileset dir="${release.dir.java}"	prefix="${generated.filename.zip}"       includes="${generated.filename.jar}" />
			<zipfileset dir="${release.dir.java}" 	prefix="${generated.filename.zip}"       includes="docs/**"/>
		</zip>
		<zip
			destfile="${release.dir}/${generated.filename.zip}_src.zip">
			<exclude name="**/CVS" />
			<exclude name="**/*.obj" />
			<exclude name="**/*.class" />
			<exclude name="**/*.dll" />
			<exclude name="**/*.exp" />
			<exclude name="**/*.jar" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="src/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="docs/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="jni/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="samples/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="unittest/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="vstudio/jacob.vcproj" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="lib/**" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="build.xml, README.txt" />
			<zipfileset dir="${basedir}"     prefix="${generated.filename.zip}" includes="LICENSE.* version.properties" />
		</zip>
	</target>
	
	<!-- ======================================================================
		       JUnit testing
		       This should probably be dependent on dll also
		       This assumes we are always testing on x86
		       This assumes that ant-junit is available 
		 ================================================================== -->
	<target name='test' depends='javaCompile' >
		<junit 	printsummary="yes" 
				haltonfailure="yes"  
				fork="true" 
				dir="${release.dir.java}"
			>
			<sysproperty key="java.library.path" value="${release.dir.x86}" />
			<classpath>
				<pathelement location="${junit.jar}"/>
				<pathelement location="${release.dir.java}"/>
				<pathelement path="${src.java.unittest}"/>
			</classpath>
			<formatter type="brief" usefile="false"/>
			<batchtest>
				<!-- use the source directory because it tries to run inner classes
					if we use the release directory -->
				<fileset dir="${src.java.unittest}">
					<include name="**/*.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
</project>

